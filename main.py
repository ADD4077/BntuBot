import random, string, os, time, pytz, asyncio
import sqlite3, json
from datetime import datetime, timedelta

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardMarkup

from func import *
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = '8227342510:AAFpVIGrnvkwq5nwQGhaYLXUrPf-gi_2heM'
API_TOKEN = os.getenv('TOKEN')

main_menu_image = os.getenv('MAIN_IMAGE')
example_photo = os.getenv('EXAMPLE_IMAGE')
map_photo = os.getenv('MAP_IMAGE')

user_admin = os.getenv('USER_ADMIN')
id_admin = os.getenv('ID_ADMIN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
tz = pytz.timezone("Europe/Moscow")

with open('schedule.json', 'r', encoding="utf8") as json_file:
    schedule_base = json.load(json_file)

connection = sqlite3.connect(f'server.db')
cursor = connection.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users(
    id INT,
    FIO TEXT,
    fac TEXT,
    student_code INT,
    bilet_code INT
)""")

passes = {
    '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞':'–ú–∏—Ö–∞—Å–∏–∫ –ï–≤–≥–µ–Ω–∏–π –ò–≥–æ—Ä–µ–≤–∏—á\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n<blockquote>1. –ö–æ–Ω—Å–ø–µ–∫—Ç\n2. –í—Å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ\n3. –†–µ—Ñ–µ—Ä–∞—Ç</blockquote>\n\n–ü–ª–∞–Ω —Ä–µ—Ñ–µ—Ä–∞—Ç–∞:\n<blockquote>–í–≤–µ–¥–µ–Ω–∏–µ\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n3 –≥–ª–∞–≤—ã\n–ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã</blockquote>\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Ñ–µ—Ä–∞—Ç—É:\n<blockquote>–°—Ä–æ–∫ —Å–¥–∞—á–∏ - 1 –¥–µ–∫–∞–±—Ä—è\n–¥–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü\nTimes New Roman 14\n18 –ø—É–Ω–∫—Ç–æ–≤ –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n–û—Ç—Å—Ç—É–ø 1,25 —Å–º\n–ù—É–º–µ—Ä–∞—Ü–∏—è —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É \n–º–∏–Ω–∏–º—É–º 1 —Ä–∏—Å—É–Ω–æ–∫ –∏ 1 —Ç–∞–±–ª–∏—Ü–∞\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</blockquote>',
    '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π':'–ó–¥–æ—Ä–æ–Ω–æ–∫ –ò.–ê.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n<blockquote>1. –ü–æ—Å–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π\n2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç –¥–ª—è –º–∞–∫—É–ª–∞—Ç—É—Ä—ã\n3. –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</blockquote>',
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞':'–Æ—Ö–Ω–æ–≤—Å–∫–∞—è –û.–í.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n<blockquote>1. –ü–æ—Å–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π\n2. –ö–æ–Ω—Å–ø–µ–∫—Ç</blockquote>\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n<blockquote>–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 1 –ø–∞—Ä—É –ø–æ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ\n–ó–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –ø–∞—Ä—É –Ω–∞ —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å</blockquote>',
    '–•–∏–º–∏—è':'–ë—É—Ä–∞–∫ –ì.–ê.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n<blockquote>1. –ü–æ—Å–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π\n2. –ö–æ–Ω—Å–ø–µ–∫—Ç\n3. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö\n4. –ú–∏–Ω–∏–º—É–º 6 –±–∞–ª–ª–æ–≤</blockquote>\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n<blockquote>–î–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ, –Ω—É–∂–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å.\n–î–æ–º–∞—à–Ω–µ–µ - 2 –±–∞–ª–ª–∞\nA —á–∞—Å—Ç—å - 2 –±–∞–ª–ª–∞\nB —á–∞—Å—Ç—å - 4 –±–∞–ª–ª–∞\n–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è - 2 –±–∞–ª–ª–∞\n–¢–∞–∫–∂–µ –ø–æ–º–∏–º–æ –∑–∞–¥–∞–Ω–∏–π A –∏ B —á–∞—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è C —á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–∞–ª–ª–∞</blockquote>'
}

@dp.message(Command("start"))
async def start(message: types.Message):
    if cursor.execute(f"SELECT id FROM users WHERE id = {message.from_user.id}").fetchone() is None:
        await bot.send_message(
            id_admin,
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.full_name})."
        )
        await auth_send(bot, message)
        return
    b_schedule = types.InlineKeyboardButton(
        text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=f"schedule"
    )
    b_pass = types.InlineKeyboardButton(
        text="üìå –ó–∞—á—ë—Ç—ã",
        callback_data=f"passes"
    )
    row_lessons = [b_schedule, b_pass]
    b_litter = types.InlineKeyboardButton(
        text="üìú –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        callback_data=f"litterature"
    )
    row_lit = [b_litter]
    b_map = types.InlineKeyboardButton(
        text="üó∫Ô∏è –ö–∞—Ä—Ç–∞",
        callback_data=f"map"
    )
    b_site = types.InlineKeyboardButton(
        text="üåê –°–∞–π—Ç –ë–ù–¢–£",
        url=f"https://bntu.by"
    )
    row_site = [b_map, b_site]
    b_help = types.InlineKeyboardButton(
        text="üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        callback_data=f"help"
    )
    row_help = [b_help]
    rows = [row_lessons, row_lit, row_site, row_help]
    main_menu_markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer_photo(
            photo = main_menu_image,
            caption = f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, @{message.from_user.username}!\n\n–≠—Ç–æ –ë–û–¢ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –í–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.\n\n‚Äî –ë—ã—Å—Ç—Ä–æ\n‚Äî –ù–∞–¥—ë–∂–Ω–æ\n‚Äî –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
            reply_markup=main_menu_markup
        )

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    b_schedule = types.InlineKeyboardButton(
        text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=f"schedule"
    )
    b_pass = types.InlineKeyboardButton(
        text="üìå –ó–∞—á—ë—Ç—ã",
        callback_data=f"passes"
    )
    row_lessons = [b_schedule, b_pass]
    b_litter = types.InlineKeyboardButton(
        text="üìú –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        callback_data=f"litterature"
    )
    row_lit = [b_litter]
    b_map = types.InlineKeyboardButton(
        text="üó∫Ô∏è –ö–∞—Ä—Ç–∞",
        callback_data=f"map"
    )
    b_site = types.InlineKeyboardButton(
        text="üåê –°–∞–π—Ç –ë–ù–¢–£",
        url=f"https://bntu.by"
    )
    row_site = [b_map, b_site]
    b_help = types.InlineKeyboardButton(
        text="üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        callback_data=f"help"
    )
    row_help = [b_help]
    rows = [row_lessons, row_lit, row_site, row_help]
    main_menu_markup = InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await callback.message.edit_caption(
            photo = main_menu_image,
            caption=f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, @{callback.from_user.username}!\n\n–≠—Ç–æ –ë–û–¢ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –í–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.\n\n‚Äî –ë—ã—Å—Ç—Ä–æ\n‚Äî –ù–∞–¥—ë–∂–Ω–æ\n‚Äî –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
            reply_markup=main_menu_markup
        )
    except:
        await callback.message.delete()
        await callback.message.answer_photo(
                photo = main_menu_image,
                caption = f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, @{callback.from_user.username}!\n\n–≠—Ç–æ –ë–û–¢ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –í–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.\n\n‚Äî –ë—ã—Å—Ç—Ä–æ\n‚Äî –ù–∞–¥—ë–∂–Ω–æ\n‚Äî –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
                reply_markup=main_menu_markup
            )

@dp.callback_query(F.data == "auth")
async def auth_begin(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer_photo(
        photo = example_photo,
        caption = f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –í–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º. –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–∫–∏–º, –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ –±–µ–∑ –±–ª–∏–∫–æ–≤.",
    )
    await state.set_state(Form.photo)

@dp.message(Form.photo)
async def auth_end(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return
    b_auth = types.InlineKeyboardButton(
        text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å",
        callback_data=f"accept_auth {message.from_user.id}"
    )
    row_auth = [b_auth]
    b_decline = types.InlineKeyboardButton(
        text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"decline_auth"
    )
    row_decline = [b_decline]
    rows = [row_auth, row_decline]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    photo = message.photo[-1]
    await bot.send_photo(
        id_admin,
        photo=photo.file_id,
        caption=f"–§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {message.from_user.id})",
        reply_markup=markup
    )
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

@dp.callback_query(F.data.split()[0] == "accept_auth")
async def accept_auth(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_caption(
        caption="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –§–ò–û, –§–∞–∫—É–ª—å—Ç–µ—Ç, –ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—á–µ—Ä–Ω—ã–π), –ö–æ–¥ –±–∏–ª–µ—Ç–∞ (–∫—Ä–∞—Å–Ω—ã–π)."
    )
    await state.set_state(AcceptAuthForm.id)
    await state.update_data(id=int(callback.data.split()[1]))
    await state.set_state(AcceptAuthForm.text)

@dp.message(AcceptAuthForm.text)
async def accept_auth_2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    id = data.get("id")
    await state.clear()
    fio = message.text.split(', ')[0]
    fac = message.text.split(',')[1].replace(' ','')
    student_code = int(message.text.split(',')[2])
    bilet_code = int(message.text.split(',')[3])
    if cursor.execute(f"SELECT id FROM users WHERE id = {id}").fetchone() is not None:
        await message.answer("–£–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor.execute(f"INSERT INTO users VALUES ({id}, '{fio}','{fac}', {student_code}, {bilet_code})")
    connection.commit()
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
    await bot.send_message(
        id, f'{fio.split()[1]}, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç –ë–ù–¢–£! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start'
    )

@dp.callback_query(F.data == "map")
async def main_menu(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    back = types.InlineKeyboardButton(
        text="–£–±—Ä–∞—Ç—å",
        callback_data=f"delete"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[back]])
    await callback.message.answer_photo(
        photo=map_photo,
        caption=f'üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–∏–Ω–∏-–≥–æ—Ä–æ–¥–∫–∞ –ë–ù–¢–£',
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "passes")
async def passes_button(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    rows = []
    for i in list(passes):
        b = types.InlineKeyboardButton(
            text=i,
            callback_data=f"get_passes {i}"
        )
        rows.append([b])
    back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"main_menu"
    )
    rows.append([back])
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await callback.message.edit_caption(
        caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –ø—Ä–µ–¥–º–µ—Ç:',
        reply_markup=markup
    )

@dp.callback_query(F.data.split()[0] == "get_passes")
async def passes_button(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    text = f"{callback.data.split()[1]} | "+passes[callback.data.split()[1]]
    back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"passes"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[back]])
    await callback.message.edit_caption(
        caption=text,
        reply_markup=markup, parse_mode="HTML"
    )

@dp.callback_query(F.data == "schedule")
async def schedule(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    b_together = types.InlineKeyboardButton(
        text="–°–µ–≥–æ–¥–Ω—è",
        callback_data=f"send_schedule together"
    )
    b_tomorrow = types.InlineKeyboardButton(
        text="–ó–∞–≤—Ç—Ä–∞",
        callback_data=f"send_schedule tomorrow"
    )
    row_days = [b_together, b_tomorrow]
    b_next_week = types.InlineKeyboardButton(
        text="–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è",
        callback_data=f"send_schedule next_week"
    )
    b_this_week = types.InlineKeyboardButton(
        text="–≠—Ç–∞ –Ω–µ–¥–µ–ª—è",
        callback_data=f"send_schedule week"
    )
    row_weeks = [b_this_week, b_next_week]
    back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"main_menu"
    )
    row_back = [back]
    rows = [row_days, row_weeks, row_back]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await callback.message.edit_caption(
            caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –í–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:',
            reply_markup=markup
            )
    except:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo = main_menu_image,
            caption = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –í–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:',
            reply_markup=markup
        )

@dp.callback_query(F.data.split()[0] == "send_schedule")
async def schedule(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    student_code = cursor.execute(f"SELECT student_code FROM users WHERE id = {callback.from_user.id}").fetchone()[0]
    group = str(student_code)[:-2]
    if callback.data.split()[1] == 'week':
        week, day = get_week_and_day()
        back = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"schedule"
        )
        row = [back]
        rows = [row]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        text = ''
        for i in schedule_base[group][week]:
            text += f"\n{i}:\n"
            for j in schedule_base[group][week][i]:
                text += f"<blockquote>{j["Time"]} | {j["Matter"]}\n{j["Frame"]} –∫–æ—Ä–ø., {j["Classroom"]} –∞—É–¥–∏—Ç.\n{j["Teacher"]}</blockquote>\n"
        await callback.message.delete()
        await callback.message.answer(
            f'{text}',
            reply_markup=markup, parse_mode="HTML"
        )
    elif callback.data.split()[1] == 'next_week':
        week, day = get_week_and_day()
        if week == 1:
            week = 2
        else:
            week = 1
        back = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"schedule"
        )
        row = [back]
        rows = [row]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        text = ''
        for i in schedule_base[group][week]:
            text += f"\n{i}:\n"
            for j in schedule_base[group][week][i]:
                text += f"<blockquote>{j["Time"]} | {j["Matter"]}\n{j["Frame"]} –∫–æ—Ä–ø., {j["Classroom"]} –∞—É–¥–∏—Ç.\n{j["Teacher"]}</blockquote>\n"
        await callback.message.delete()
        await callback.message.answer(
            f'{text}',
            reply_markup=markup, parse_mode="HTML"
        )
    elif callback.data.split()[1] == 'together':
        week, day = get_week_and_day()
        back = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"schedule"
        )
        row = [back]
        rows = [row]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        text = ''
        try:
            for i in schedule_base[group][week][day]:
                text += f"<blockquote>{i["Time"]} | {i["Matter"]}\n{i["Frame"]} –∫–æ—Ä–ø., {i["Classroom"]} –∞—É–¥–∏—Ç.\n{i["Teacher"]}</blockquote>\n"
        except KeyError:
            text += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ"
        await callback.message.delete()
        await callback.message.answer(
            f'{day}:\n{text}',
            reply_markup=markup, parse_mode="HTML"
        )
    elif callback.data.split()[1] == 'tomorrow':
        week, day = get_tomorrow_week_and_day()
        back = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"schedule"
        )
        row = [back]
        rows = [row]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        text = ''
        try:
            for i in schedule_base[group][week][day]:
                text += f"<blockquote>{i["Time"]} | {i["Matter"]}\n{i["Frame"]} –∫–æ—Ä–ø., {i["Classroom"]} –∞—É–¥–∏—Ç.\n{i["Teacher"]}</blockquote>\n"
        except KeyError:
            text += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ"
        await callback.message.delete()
        await callback.message.answer(
            f'{day}:\n{text}',
            reply_markup=markup, parse_mode="HTML"
        )

@dp.callback_query(F.data == "delete")
async def delete(callback: types.CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data.split()[0] == "help")
async def help(callback: types.CallbackQuery):
    if cursor.execute(f"SELECT id FROM users WHERE id = {callback.from_user.id}").fetchone() is None:
        await auth_send(bot, callback)
        return
    back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"main_menu"
    )
    row = [back]
    rows = [row]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await callback.message.delete()
    await callback.message.answer(
        f'–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–¥–µ–∏ –∏–ª–∏ –í—ã –Ω–∞—à–ª–∏ –±–∞–≥, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–æ–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–û–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É {user_admin}',
        reply_markup=markup
    )

async def main():
    me = await bot.get_me()
    print(f'@{me.username} ({me.first_name})')
    await dp.start_polling(bot)

asyncio.run(main())

